# Given a program (if omitted use the one from the last invocation)
# load it into GDB and connect to the target.  At this point one for
# example should be able to set a breakpoint on main and a single
# continue should hit this breakpoint.

load_lib ../config/octeon-elf-gdb.exp
load_lib gdb.exp

proc gdb_load { arg } {
    global gdb_prompt
    global last_gdb_file
    global octeon_sim_spawnid octeon_sim_pid
    global OCTEON_SPAWN_SIM

    verbose "octeon-elf-sim-config.exp gdb_load: $arg\n"

    if { $arg == "" } {
	if [info exists last_gdb_file] {
	    set arg $last_gdb_file;
	    verbose "no file using default: $arg\n"
	}
    }
    set last_gdb_file $arg;

    gdb_file_cmd $arg

    # Kill the previous simulator if left stale.  We used to just invoke close
    # on octeon_sim_spawnid here.  That was leaving a defunct oct-sim process
    # around.  The documenation says that after a close you should call wait
    # to clear up the corresponding kernel process slot but wait fails on a
    # closed channel.  So instead we do a kill and a wait.
    if {[catch {exec kill -9 $octeon_sim_pid}] == 0} {
	send_log "Killed stale simulator with pid $octeon_sim_pid\n"
	wait -i $octeon_sim_spawnid
    }

    if [board_info target exists octeon_sim_gdb_port] {
	set port [board_info target octeon_sim_gdb_port]
    } else {
	set port 5258
    }
    set target_cmd_args "tcp::$port"

    lappend args $arg "-debug" "-quiet" "-uart1=$port"

    global OCTEON_NUMCORES
    if [info exists OCTEON_NUMCORES] {
        lappend  args "-numcores=$OCTEON_NUMCORES"
    }
    global OCTEON_SIM_PERF
    if {![info exists OCTEON_SIM_PERF] || !$OCTEON_SIM_PERF} {
	lappend args "-noperf"
    }
    global OCTEON_SIM_ARGS
    if [info exists OCTEON_SIM_ARGS] {
	set args [concat $args $OCTEON_SIM_ARGS]
    }

    # Decide whether to spawn the simulator externally or from gdb.
    # When spawning internally we can test (re)run.  OCTEON_SPAWN_SIM
    # is the test-specific and !gdb,do_reload_on_run is the global
    # knob.  display-sim Octeon GDB variable controls whether to spawn
    # the simulator in an xterm or in the background.  display-sim is
    # defaulted to zero and is only set if we are in run mode globally
    # (!gdb,do_reload_on_run) and the gdb,octeon_display_sim global
    # flag is on.
    set global_spawn_sim \
	[expr ![board_info target exists gdb,do_reload_on_run]]
    if {$global_spawn_sim
	|| [info exists OCTEON_SPAWN_SIM]} {
	# Pass args to the target command.
	set target_cmd_args [concat $target_cmd_args [lrange $args 1 end]]

	send_gdb "set spawn-sim 1\n"
	gdb_expect 30 {
	    -re ".*$gdb_prompt $" { }
	    timeout { return -1 }
	}
	if {!$global_spawn_sim
	    || ![board_info target exists gdb,octeon_display_sim]} {
	    send_gdb "set display-sim 0\n"
	    gdb_expect 30 {
		-re ".*$gdb_prompt $" { }
		timeout { return -1 }
	    }
	}
    } else {
	if [start_oct_sim $args $port] then { return -1 }
    }

    send_gdb "target octeon $target_cmd_args\n"
    gdb_expect 30 {
	-re ".*$gdb_prompt $" { }
	timeout {
	    perror "timeout while connecting to target"
	    cleanup
	    return -1
	}
    }
    return 0;
}

proc start_oct_sim { args port } {
    global timeout
    global spawn_id
    global octeon_sim_spawnid
    global octeon_sim_pid

    send_log "Executing: [board_info target sim] [join $args {,}]\n"
    set octeon_sim_pid [eval spawn [board_info target sim] $args]
    if {$spawn_id < 0} {
	send_log "Failed to start the simulator\n"
	cleanup
	return -1
    }
    
    send_log "Connection to simulator is $spawn_id, pid: $octeon_sim_pid\n"
    set octeon_sim_spawnid $spawn_id

    # The kernel debugging on simulator takes longer time to load the program
    # increase the timeout and later revert it back to its original value.
    set saved $timeout
    set timeout 20

    expect {
	"Done loading app" {}
	timeout  {
	    send_log "Connecting to the simulator timed out\n"
	    cleanup
	    return -1
	}
	eof {
	    send_log "Simulator has closed the connection\n"
	    cleanup
	    return -1
	}
    }
  
    # Revert it back to old timeout
    set timeout $saved

    # I don't fully understand why we need this but it seems that
    # unless the output of the simulator is consumed, the process will
    # be suspended.  A positive side effect of this is that now all
    # the simulator output is captured in the log.
    expect_background -re ".+" {}

    unset spawn_id

    return 0
}
