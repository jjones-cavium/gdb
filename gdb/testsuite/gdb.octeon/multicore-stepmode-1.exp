#   Copyright 2007 Cavium Networks, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
#
if ![istarget "mipsisa64-octeon-*"] then {
  return -1;
}

set testfile "multicore-stepmode-1"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}.out

if {[gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
	 executable {debug nowarnings}] != ""} {
    fail "compilation"
    return
}
pass "compilation"

gdb_exit
gdb_start
set OCTEON_NUMCORES 4
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

gdb_test "set step-all on"
gdb_test "set active-cores"

gdb_test "break $srcfile:10"
gdb_test "continue"

proc read_pc {} {
    global gdb_prompt

    send_gdb "p/x \$pc\n"
    gdb_expect {
	-re "= \(0x\[0-9a-f\]+\).*$gdb_prompt" {
	    return $expect_out(1,string)
	}
	timeout {
	    return ""
	}
    }
}

proc gdb_test_with_core_prompt {core args} {
    global gdb_prompt
    global octeon_core${core}_prompt

    set save $gdb_prompt
    eval set gdb_prompt \${octeon_core${core}_prompt}
    eval gdb_test $args
    set gdb_prompt $save
}

foreach {core} {0 1 2 3} {
    gdb_test_with_core_prompt $core "set focus $core"
    set pc($core) [read_pc]
    if {$pc($core) != ""} {
	send_log "core$core is at $pc($core)\n"
	pass "read pc of core #$core"
    } else {
	fail "read pc of core #$core (timeout)"
    }
}

gdb_test "set step-all off"

# Now single-step each core separately.
set u 0
foreach {core} {1 3 0 2} {
    foreach {proceed} {"stepi" "nexti" "next" "stepi" "continue"} {
	gdb_test "set focus $core" "" "focus to step core $core ($u)"
	gdb_test_with_core_prompt $core $proceed "" \
	    "proceed with $proceed in core $core ($u)"
	foreach {other} {0 1 2 3} {
	    gdb_test "set focus $other" "" "focus to non-step core $other ($u)"
	    set new [read_pc]
	    if {$other == $core} {
		# Check that the core moves.
		if {$new == "" || $new == $pc($core)} {
		    fail "single-stepping core $core ($u)"
		    send_log "$new == $pc($core)\n"
		} else {
		    pass "single-stepping core $core ($u)"
		}
	    } else {
		# But other cores don't.
		if {$new == "" || $new != $pc($other)} {
		    fail "core $other stopped while core $core steps ($u)"
		    send_log "$new != $pc($other)\n"
		} else {
		    pass "core $other stopped while core $core steps ($u)"
		}
	    }
	    set pc($other) $new
	    incr u
	}
    }
}
