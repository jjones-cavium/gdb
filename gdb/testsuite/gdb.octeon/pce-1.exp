# Copyright 2007 Cavium Networks, Inc.
#
# Test debugging the kernel.  We assume that the variable KERNEL
# points to the kernel.
 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Test performance counter events for "clk", "lds". Change the event0 event 
# to "ssissue" and make sure the counter for this event is reset properly.
#
if ![istarget "mipsisa64-octeon-*"] then {
  return -1;
}

set testfile "pce-1"
set srcfile ${testfile}.c
set binfile ${testfile}.out

# build simple exec app
set binfile [ cvmx_compile $binfile $srcdir/$subdir $srcfile "" "-g" "" "" ]

if { $binfile == "" } {
  fail "compilation"
  return;
}

pass "compilation"

gdb_exit
gdb_start
set OCTEON_SIM_PERF 1
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

set bp_location_1 [gdb_get_line_number "set break1 here"]

gdb_test "break ${srcfile}:$bp_location_1"

gdb_run_cmd
gdb_expect {
    -re ".*Breakpoint \[0-9\]+,.*${srcfile}:$bp_location_1.*$gdb_prompt $" {
	pass "run to breakpoint"
    }
    -re ".*$gdb_prompt $" {
	fail "run to breakpoint"
    }
    timeout { fail "run to breakpoint (timeout)" }
}

gdb_test "show perf-event0" \
    "Performance counter0 event is not set." \
    "Performance event0 is not set"

# Set performance counter event0 to "clk"
gdb_test "set perf-event0 clk"

# Set performance counter event1 to "lds"
gdb_test "set perf-event1 lds"

# check the performance counter events status
gdb_test "show perf-event0" \
    "Performance counter0 for \"clk\" event is 0.*" \
    "Event0 initial value for clk event"

gdb_test "show perf-event1" \
    "Performance counter1 for \"lds\" event is 0.*" \
    "Event1 initial value for lds event"

set clk_counter 0
set lds_counter 0

gdb_test "continue" \
    ".*Continuing\\..*Breakpoint \[0-9\]+,.*${srcfile}:${bp_location_1}.*" \
    "continue to check performance counter events counter changed"

# Check the performance counter events
send_gdb "show perf-event0\n"
gdb_expect {
    -re ".*counter0 for \"clk\" event is \(\[0-9\]+\).*$gdb_prompt $"  {
	set clk_counter $expect_out(1,string)
	if { $clk_counter != 0 } {
	    pass "Event0 status for clk event changed"
	} else {
	    fail "Event0 status for clk event changed"
	}
    }
    -re ".*$gdb_prompt $" {
	fail "Event0 status for clk event changed"
    }
    timeout { fail "Event0 status for clk event changed (timeout)" } 
}

send_gdb "show perf-event1\n" 
gdb_expect {
    -re ".*counter1 for \"lds\" event is \(\[0-9\]+\).*$gdb_prompt $" {
	set lmlds_counter $expect_out(1,string)
	if { $lds_counter != 0 } { 
	    pass "Event1 status for lds event changed"
	} else {
	    pass "Event1 status for lds event changed"
	}
    }
    -re ".*$gdb_prompt $" {
	fail "Event1 status for lds event changed"
    }
    timeout { fail "Event1 status for lds event changed (timeout)" }
}

gdb_test "continue" \
    ".*Continuing\\..*Breakpoint \[0-9\]+,.*${srcfile}:${bp_location_1}.*" \
    "continue to check performance counter events counter changed again"

send_gdb "show perf-event0\n"
gdb_expect {
    -re ".*counter0 for \"clk\" event is \(\[0-9\]+\).*$gdb_prompt $" {
	if { $clk_counter != $expect_out(1,string) } { 
	    pass "Event0 status for clk event changed again"
	} else { 
	    fail "Event0 status for clk event changed again"
	}
    }
    -re ".*$gdb_prompt $" {
	fail "Event0 status for clk event changed again"
    }
    timeout { fail "Event0 status for clk event changed again (timeout)" }
}

send_gdb "show perf-event1\n"
gdb_expect {
    -re ".*counter1 for \"lds\" event is \(\[0-9\]+\).*$gdb_prompt $" {
	if { $lds_counter != $expect_out(1,string) } { 
	    pass "Event1 status for lds event changed again" 
	} else { 
	    fail "Event1 status for lds event changed again" 
	}
    }
    -re ".*$gdb_prompt $" {
	fail "Event1 status for lds event changed again"
    }
    timeout { fail "Event1 status for lds event changed again (timeout)" }
}

# now change the events and make sure the values are reset.
gdb_test "set perf-event0 sissue" 

gdb_test "show perf-event0" \
    ".*Performance counter0 for \"sissue\" event is 0.*" \
    "Event0 status after resetting the event to sissue"

set sissue_counter 0

gdb_test "continue" \
    ".*Continuing\\..*Breakpoint \[0-9\]+,.*${srcfile}:${bp_location_1}.*" \
    "continue after resetting the performance counter events"

# Check the performance counter events
send_gdb "show perf-event0\n"
gdb_expect {
    -re ".*counter0 for \"sissue\" event is \(\[0-9\]+\).*$gdb_prompt $"  {
	set sissue_counter $expect_out(1,string)
	if { $sissue_counter != 0 } {
	    pass "Event0 status for sissue event changed"
	} else {
	    fail "Event0 status for sissue event changed"
	}
    }
    -re ".*$gdb_prompt $" {
	fail "Event0 status for sissue event changed"
    }
    timeout { fail "Event0 status for sissue event changed (timeout)" } 
}

# re-run the program, the events should be reset.
gdb_run_cmd 
gdb_expect {
    -re ".*Breakpoint \[0-9\]+,.*${srcfile}:$bp_location_1.*$gdb_prompt $" {
	pass "run to breakpoint"
    }
    -re ".*$gdb_prompt $" {
	fail "run to breakpoint"
    }
    timeout { fail "run to breakpoint (timeout)" }
}

send_gdb "show perf-event0\n"
gdb_expect {
    -re ".*Performance counter0 for \"sissue\" event is.*$gdb_prompt $" {
	fail "Event0 status is reset"
    }
    -re ".*Performance counter0 for .*event is 0.*$gdb_prompt $" {
	pass "Event0 status is reset"
    }
    -re ".*$gdb_prompt $" {
	fail "Event0 status is reset"
    }
    timeout { fail "Event0 status is reset (timeout)" }
}
